/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    films: Film;
    characters: Character;
    planets: Planet;
    species: Species;
    starships: Starship;
    vehicles: Vehicle;
    pages: Page;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    films: FilmsSelect<false> | FilmsSelect<true>;
    characters: CharactersSelect<false> | CharactersSelect<true>;
    planets: PlanetsSelect<false> | PlanetsSelect<true>;
    species: SpeciesSelect<false> | SpeciesSelect<true>;
    starships: StarshipsSelect<false> | StarshipsSelect<true>;
    vehicles: VehiclesSelect<false> | VehiclesSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  webpUrl?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "films".
 */
export interface Film {
  id: string;
  title: string;
  episodeID: string;
  opening_crawl?: string | null;
  director?: string | null;
  producer?: string | null;
  release_date?: string | null;
  species?: (string | Species)[] | null;
  starships?: (string | Starship)[] | null;
  vehicles?: (string | Vehicle)[] | null;
  characters?: (string | Character)[] | null;
  planets?: (string | Planet)[] | null;
  swapiId?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "species".
 */
export interface Species {
  id: string;
  name: string;
  classification?: string | null;
  designation?: string | null;
  average_height?: string | null;
  average_lifespan?: string | null;
  eye_colors?: string | null;
  hair_colors?: string | null;
  skin_colors?: string | null;
  language?: string | null;
  homeworld?: (string | null) | Planet;
  people?: (string | Character)[] | null;
  films?: (string | Film)[] | null;
  swapiId?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "planets".
 */
export interface Planet {
  id: string;
  name: string;
  diameter?: string | null;
  rotation_period?: string | null;
  orbital_period?: string | null;
  gravity?: string | null;
  population?: string | null;
  climate?: string | null;
  terrain?: string | null;
  surface_water?: string | null;
  residents?: (string | Character)[] | null;
  films?: (string | Film)[] | null;
  swapiId?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "characters".
 */
export interface Character {
  id: string;
  name: string;
  birth_year?: string | null;
  eye_color?: string | null;
  gender?: string | null;
  hair_color?: string | null;
  height?: string | null;
  mass?: string | null;
  skin_color?: string | null;
  homeworld?: (string | null) | Planet;
  films?: (string | Film)[] | null;
  species?: (string | Species)[] | null;
  starships?: (string | Starship)[] | null;
  vehicles?: (string | Vehicle)[] | null;
  swapiId?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "starships".
 */
export interface Starship {
  id: string;
  name: string;
  model?: string | null;
  starship_class?: string | null;
  manufacturer?: string | null;
  cost_in_credits?: string | null;
  length?: string | null;
  crew?: string | null;
  passengers?: string | null;
  max_atmosphering_speed?: string | null;
  hyperdrive_rating?: string | null;
  cargo_capacity?: string | null;
  consumables?: string | null;
  films?: (string | Film)[] | null;
  pilots?: (string | Character)[] | null;
  swapiId?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vehicles".
 */
export interface Vehicle {
  id: string;
  name: string;
  model?: string | null;
  vehicle_class?: string | null;
  manufacturer?: string | null;
  length?: string | null;
  cost_in_credits?: string | null;
  crew?: string | null;
  passengers?: string | null;
  max_atmosphering_speed?: string | null;
  cargo_capacity?: string | null;
  consumables?: string | null;
  films?: (string | Film)[] | null;
  pilots?: (string | Character)[] | null;
  swapiId?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  /**
   * To create a homepage, use the slug "home"
   */
  slug: string;
  content?: (HeroBlock | TextBlock | CtaBlock | QuoteBlock | ImageBlock)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlock".
 */
export interface HeroBlock {
  title?: string | null;
  description?: string | null;
  imageDesktop: string | Media;
  imageMobile?: (string | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'hero_block';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextBlock".
 */
export interface TextBlock {
  title: string;
  text: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'text_block';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CtaBlock".
 */
export interface CtaBlock {
  title: string;
  copy: string;
  link: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    scroll_to_id?: string | null;
    url?: string | null;
    label: string;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta_block';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "QuoteBlock".
 */
export interface QuoteBlock {
  quote: string;
  author: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'quote_block';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageBlock".
 */
export interface ImageBlock {
  imageDesktop: string | Media;
  imageMobile?: (string | null) | Media;
  caption?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'image_block';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'films';
        value: string | Film;
      } | null)
    | ({
        relationTo: 'characters';
        value: string | Character;
      } | null)
    | ({
        relationTo: 'planets';
        value: string | Planet;
      } | null)
    | ({
        relationTo: 'species';
        value: string | Species;
      } | null)
    | ({
        relationTo: 'starships';
        value: string | Starship;
      } | null)
    | ({
        relationTo: 'vehicles';
        value: string | Vehicle;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  webpUrl?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "films_select".
 */
export interface FilmsSelect<T extends boolean = true> {
  title?: T;
  episodeID?: T;
  opening_crawl?: T;
  director?: T;
  producer?: T;
  release_date?: T;
  species?: T;
  starships?: T;
  vehicles?: T;
  characters?: T;
  planets?: T;
  swapiId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "characters_select".
 */
export interface CharactersSelect<T extends boolean = true> {
  name?: T;
  birth_year?: T;
  eye_color?: T;
  gender?: T;
  hair_color?: T;
  height?: T;
  mass?: T;
  skin_color?: T;
  homeworld?: T;
  films?: T;
  species?: T;
  starships?: T;
  vehicles?: T;
  swapiId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "planets_select".
 */
export interface PlanetsSelect<T extends boolean = true> {
  name?: T;
  diameter?: T;
  rotation_period?: T;
  orbital_period?: T;
  gravity?: T;
  population?: T;
  climate?: T;
  terrain?: T;
  surface_water?: T;
  residents?: T;
  films?: T;
  swapiId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "species_select".
 */
export interface SpeciesSelect<T extends boolean = true> {
  name?: T;
  classification?: T;
  designation?: T;
  average_height?: T;
  average_lifespan?: T;
  eye_colors?: T;
  hair_colors?: T;
  skin_colors?: T;
  language?: T;
  homeworld?: T;
  people?: T;
  films?: T;
  swapiId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "starships_select".
 */
export interface StarshipsSelect<T extends boolean = true> {
  name?: T;
  model?: T;
  starship_class?: T;
  manufacturer?: T;
  cost_in_credits?: T;
  length?: T;
  crew?: T;
  passengers?: T;
  max_atmosphering_speed?: T;
  hyperdrive_rating?: T;
  cargo_capacity?: T;
  consumables?: T;
  films?: T;
  pilots?: T;
  swapiId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vehicles_select".
 */
export interface VehiclesSelect<T extends boolean = true> {
  name?: T;
  model?: T;
  vehicle_class?: T;
  manufacturer?: T;
  length?: T;
  cost_in_credits?: T;
  crew?: T;
  passengers?: T;
  max_atmosphering_speed?: T;
  cargo_capacity?: T;
  consumables?: T;
  films?: T;
  pilots?: T;
  swapiId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  content?:
    | T
    | {
        hero_block?: T | HeroBlockSelect<T>;
        text_block?: T | TextBlockSelect<T>;
        cta_block?: T | CtaBlockSelect<T>;
        quote_block?: T | QuoteBlockSelect<T>;
        image_block?: T | ImageBlockSelect<T>;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlock_select".
 */
export interface HeroBlockSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  imageDesktop?: T;
  imageMobile?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextBlock_select".
 */
export interface TextBlockSelect<T extends boolean = true> {
  title?: T;
  text?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CtaBlock_select".
 */
export interface CtaBlockSelect<T extends boolean = true> {
  title?: T;
  copy?: T;
  link?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        scroll_to_id?: T;
        url?: T;
        label?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "QuoteBlock_select".
 */
export interface QuoteBlockSelect<T extends boolean = true> {
  quote?: T;
  author?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageBlock_select".
 */
export interface ImageBlockSelect<T extends boolean = true> {
  imageDesktop?: T;
  imageMobile?: T;
  caption?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  nav: {
    navigation: {
      link: {
        type?: ('reference' | 'custom') | null;
        newTab?: boolean | null;
        reference?: {
          relationTo: 'pages';
          value: string | Page;
        } | null;
        scroll_to_id?: string | null;
        url?: string | null;
        label: string;
      };
      subnav?:
        | {
            link: {
              type?: ('reference' | 'custom') | null;
              newTab?: boolean | null;
              reference?: {
                relationTo: 'pages';
                value: string | Page;
              } | null;
              scroll_to_id?: string | null;
              url?: string | null;
              label: string;
            };
            id?: string | null;
          }[]
        | null;
    };
    id?: string | null;
  }[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  title: string;
  copy: string;
  copyright: string;
  nav: {
    navigation: {
      link: {
        type?: ('reference' | 'custom') | null;
        newTab?: boolean | null;
        reference?: {
          relationTo: 'pages';
          value: string | Page;
        } | null;
        scroll_to_id?: string | null;
        url?: string | null;
        label: string;
      };
      subnav?:
        | {
            link: {
              type?: ('reference' | 'custom') | null;
              newTab?: boolean | null;
              reference?: {
                relationTo: 'pages';
                value: string | Page;
              } | null;
              scroll_to_id?: string | null;
              url?: string | null;
              label: string;
            };
            id?: string | null;
          }[]
        | null;
    };
    id?: string | null;
  }[];
  social?:
    | {
        link: {
          url: string;
          newTab?: boolean | null;
        };
        icon?: ('facebook' | 'linkedin' | 'github') | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  nav?:
    | T
    | {
        navigation?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    scroll_to_id?: T;
                    url?: T;
                    label?: T;
                  };
              subnav?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          scroll_to_id?: T;
                          url?: T;
                          label?: T;
                        };
                    id?: T;
                  };
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  title?: T;
  copy?: T;
  copyright?: T;
  nav?:
    | T
    | {
        navigation?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    scroll_to_id?: T;
                    url?: T;
                    label?: T;
                  };
              subnav?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          scroll_to_id?: T;
                          url?: T;
                          label?: T;
                        };
                    id?: T;
                  };
            };
        id?: T;
      };
  social?:
    | T
    | {
        link?:
          | T
          | {
              url?: T;
              newTab?: T;
            };
        icon?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}